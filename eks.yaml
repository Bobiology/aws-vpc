AWSTemplateFormatVersion: '2010-09-09'
Description: EKS UAT Cluster
Parameters:
  EKSClusterName:
    Type: String
    Description: uat-a-cluster
    Default: DP-EKS-UAT-CLUSTER
  NumWorkerNodes:
    Type: Number
    Description: Number of worker nodes to create
    Default: 2
  WorkerNodesInstanceType:
    Type: String
    Description: EC2 worker nodes instance Type
    Default: t2.medium  
  KeyPairName:
    Type: String
    Description: Name of an existing EC2 key pair for SSH-access to the worker nodes.
    Default: DP-EKS-KEY-PAIR 
  ExportVpcStackName:
     Description: Name of the VPC stack to export value from
     Type: String
  LatestAmiId:
    Description: Region specific image from the Parameter Store
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Mappings:
  VpcIpRanges:
    Option1:
      VPC: 10.100.0.0/16    
      PublicSubnetA : 10.100.0.0/20
      PrivateSubnetA: 10.100.1.0/20
  EksAmiIds:    
    us-east-1:
      AMI: ami-0ed01d017547d7b22

Resources:
  ControlPlane:
    Type: AWS::EKS::Cluster
    Properties:
      Name: EKS_UAT
      Version: "1.19"
      RoleArn: !GetAtt ControlPlaneRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          Fn::ImportValue: !Sub ${ExportVpcStackName}-ControlPlaneSecurityGroup
        SubnetIds:
          Fn::ImportValue: !Sub ${ExportVpcStackName}-PrivateSubnetA
  ControlPlaneRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
            Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
  #============================================================================#
  # Control plane security group
  #============================================================================#
  ControlPlaneIngressFromWorkerNodesHttps:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow incoming HTTPS traffic (TCP/443) from worker nodes (for API server)
      GroupId: 
        Fn::ImportValue: !Sub ${ExportVpcStackName}-ControlPlaneSecurityGroup
      SourceSecurityGroupId: 
        Fn::ImportValue: !Sub ${ExportVpcStackName}-WorkerNodesSecurityGroup 
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443
  ControlPlaneEgressToWorkerNodesKubelet:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow outgoing kubelet traffic (TCP/10250) to worker nodes
      GroupId: 
        Fn::ImportValue: !Sub ${ExportVpcStackName}-ControlPlaneSecurityGroup
      DestinationSecurityGroupId:
        Fn::ImportValue: !Sub ${ExportVpcStackName}-WorkerNodesSecurityGroup
      IpProtocol: tcp
      FromPort: 10250
      ToPort: 10250
  ControlPlaneEgressToWorkerNodesHttps:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow outgoing HTTPS traffic (TCP/442) to worker nodes (for pods running extension API servers)
      GroupId: 
         Fn::ImportValue: !Sub ${ExportVpcStackName}-ControlPlaneSecurityGroup
      DestinationSecurityGroupId:
         Fn::ImportValue: !Sub ${ExportVpcStackName}-WorkerNodesSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
  #============================================================================#
  # Worker nodes security group
  # Note: default egress rule (allow all traffic to all destinations) applies
  #============================================================================#
  WorkerNodesIngressFromWorkerNodes:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow all incoming traffic from other worker nodes
      GroupId: 
         Fn::ImportValue: !Sub ${ExportVpcStackName}-ControlPlaneSecurityGroup
      SourceSecurityGroupId: 
         Fn::ImportValue: !Sub ${ExportVpcStackName}-WorkerNodesSecurityGroup
      IpProtocol: "-1"
  WorkerNodesIngressFromControlPlaneKubelet:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow incoming kubelet traffic (TCP/10250) from control plane 
      GroupId: 
        Fn::ImportValue: !Sub ${ExportVpcStackName}-WorkerNodesSecurityGroup
      SourceSecurityGroupId: 
        Fn::ImportValue: !Sub ${ExportVpcStackName}-ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 10250
      ToPort: 10250
  WorkerNodesIngressFromControlPlaneHttps:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow incoming HTTPS traffic (TCP/443) from control plane (for pods running extension API servers)
      GroupId: 
        Fn::ImportValue: !Sub ${ExportVpcStackName}-WorkerNodesSecurityGroup
      SourceSecurityGroupId: 
        Fn::ImportValue: !Sub ${ExportVpcStackName}-ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
  #============================================================================#
  # Worker nodes (auto-scaling group)
  #============================================================================#
  WorkerNodesAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
    Properties:
      LaunchConfigurationName: !Ref WorkerNodesLaunchConfiguration
      MinSize: !Ref NumWorkerNodes
      MaxSize: !Ref NumWorkerNodes
      VPCZoneIdentifier:
        Fn::ImportValue: !Sub ${ExportVpcStackName}-PrivateSubnetA
        Fn::ImportValue: !Sub ${ExportVpcStackName}-PrivateSubnetB
      Tags:
        - Key: Name
          Value: WorkerNodesAutoScalingGroup
      PropagateAtLaunch: true

  WorkerNodesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service:
              - ec2.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  # IMPORTANT NOTE: We have to define NodeGroup (type: AWS::EKS::Nodegroup), without this no woker nodes will be attach to cluster
  WorkerNodegroup:
    Type: AWS::EKS::Nodegroup
    DependsOn: ControlPlane
    Properties:
      ClusterName: !Sub '${AWS::StackName}'
      NodeRole: !GetAtt WorkerNodesRole.Arn
      ScalingConfig:
        MinSize:
          Ref: NumWorkerNodes
        DesiredSize:
          Ref: NumWorkerNodes
        MaxSize:
          Ref: NumWorkerNodes
      Subnets:
        Fn::ImportValue: !Sub ${ExportVpcStackName}-PrivateSubnetA
        Fn::ImportValue: !Sub ${ExportVpcStackName}-PrivateSubnetB
      Tags:
        - Key: Name
          Value: 'WorkerNodesAutoScalingGroup'

  WorkerNodesLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    # Wait until cluster is ready before launching worker nodes
    DependsOn: ControlPlane
    Properties:
      AssociatePublicIpAddress: false
      IamInstanceProfile: !Ref WorkerNodesInstanceProfile
      ImageId: !FindInMap
        - EksAmiIds
        - !Ref LatestAmiId
        - Standard
      InstanceType: !Ref WorkerNodesInstanceType
      KeyName: !Ref KeyPairName
      SecurityGroups:
        Fn::ImportValue: !Sub ${ExportVpcStackName}-WorkerNodesSecurityGroup
      # IMPORTANT NOTE: This code bootstrap some cfn settings on our ec2 machine, it require some parameters like
      # --stack <AWS::StackName>, --resource <NodeGroupName>, --region <AWS::region>
      # /usr/bin/ping -c 5 google.com ( To ensure that our node have internet connectivity via NATGateway )
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash
            set -o xtrace
            /etc/eks/bootstrap.sh ${ControlPlane}
            /opt/aws/bin/cfn-signal \
                            --exit-code $? \
                            --stack  ${AWS::StackName} \
                            --resource WorkerNodeGroup \
                            --region ${AWS::Region}
            /usr/bin/ping -c 5 google.com 

  WorkerNodesInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref WorkerNodesRole
